// src/features/booking/BookingFlow.jsx (FIXED Navigation)

import React, { useState } from 'react';
import MobileHeader from '../../components/MobileHeader'; 
import SearchForm from './SearchForm';
import BusResults from './BusResults';
import SeatSelection from './SeatSelection';
import PassengerDetails from './PassengerDetails';
// Removed RouteCard import

const FLOW_SCREENS = {
Â  SEARCH: 'SEARCH',
Â  RESULTS: 'RESULTS',
Â  SEATS: 'SEATS',
Â  PASSENGER: 'PASSENGER',
Â  PAYMENT: 'PAYMENT', 
};

const mockBus = { id: 1, name: 'Acella', time: '05:50AM', duration: '12h 00m', arrival: '05:50PM', rating: 4.4, price: 689, seats: 20, type: 'AC Sleeper' };

const BookingFlow = ({ onContinueToPayment, children }) => {
Â  // State definitions
Â  const [currentScreen, setCurrentScreen] = useState(FLOW_SCREENS.SEARCH);
Â  const [searchParams, setSearchParams] = useState(null);
Â  const [selectedBusId, setSelectedBusId] = useState(null);
Â  const [selectedSeats, setSelectedSeats] = useState([]);
Â  const [bookingDetails, setBookingDetails] = useState(null);

Â  // === Navigation Handlers (Internal Logic) ===
Â  const handleSearch = (params) => {
    // ðŸŽ¯ CRITICAL FIX: Implement the logic to save params and change screen
    setSearchParams(params); 
    setCurrentScreen(FLOW_SCREENS.RESULTS); // <-- THIS TRIGGERS NAVIGATION
Â  };
Â  
Â  const handleSelectBus = (busId) => {
    setSelectedBusId(busId);
    setCurrentScreen(FLOW_SCREENS.SEATS);
Â  };
Â  
Â  const handleConfirmSeats = (seats) => {
    setSelectedSeats(seats);
    setCurrentScreen(FLOW_SCREENS.PASSENGER);
Â  };
Â  
Â  const handleContinueDetails = (details) => {
    setBookingDetails(details);
    onContinueToPayment({ ...details, selectedBusId, searchParams });
Â  };

Â  // === Header Title ===
Â  const getHeaderTitle = () => {
Â  Â  switch (currentScreen) {
Â  Â  Â  case FLOW_SCREENS.SEARCH:
Â  Â  Â  Â  return 'BusMitra';
Â  Â  Â  case FLOW_SCREENS.RESULTS:
Â  Â  Â  Â  return `${searchParams?.from || 'From'} to ${searchParams?.to || 'To'}`;
Â  Â  Â  case FLOW_SCREENS.SEATS:
Â  Â  Â  Â  return `${mockBus.name} - Seat Selection`;
Â  Â  Â  case FLOW_SCREENS.PASSENGER:
Â  Â  Â  Â  return 'Passenger Details';
Â  Â  Â  default:
Â  Â  Â  Â  return 'Booking';
Â  Â  }
Â  };
Â  
Â  const handleBack = () => {
    switch (currentScreen) {
        case FLOW_SCREENS.RESULTS:
            setCurrentScreen(FLOW_SCREENS.SEARCH);
            break;
        case FLOW_SCREENS.SEATS:
            setCurrentScreen(FLOW_SCREENS.RESULTS);
            break;
        case FLOW_SCREENS.PASSENGER:
            setCurrentScreen(FLOW_SCREENS.SEATS);
            break;
        default:
            break;
    }
 };

Â  // === Content Rendering ===
Â  const renderContent = () => {
Â  Â  switch (currentScreen) {
Â  Â  Â  case FLOW_SCREENS.SEARCH:
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <div className="flex-1 overflow-y-auto">
Â  Â  Â  Â  Â  Â  Â  Â  <SearchForm onSearch={handleSearch} />
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-4 pt-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-800 mb-3 mt-4">Offer Zone</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-full h-32 bg-gray-200 rounded-xl flex items-center justify-center text-sm text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [Banners / Offer Carousel Placeholder]
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  case FLOW_SCREENS.RESULTS:
Â  Â  Â  Â  if (!searchParams) return null;
Â  Â  Â  Â  return <BusResults {...searchParams} onSelectBus={handleSelectBus} />;
Â  Â  Â  case FLOW_SCREENS.SEATS:
Â  Â  Â  Â  return <SeatSelection bus={mockBus} onConfirm={handleConfirmSeats} />;
Â  Â  Â  case FLOW_SCREENS.PASSENGER:
Â  Â  Â  Â  return <PassengerDetails selectedSeats={selectedSeats} bus={mockBus} onContinue={handleContinueDetails} />;
Â  Â  Â  default:
Â  Â  Â  Â  return <p className="p-4 text-center">Something went wrong.</p>;
Â  Â  }
Â  };

Â  // === Component Return ===
Â  return (
Â  Â  <div className="flex flex-col flex-1 h-full">
Â  Â  Â  Â  <MobileHeader 
Â  Â  Â  Â  Â  Â  title={getHeaderTitle()} 
Â  Â  Â  Â  Â  Â  showBack={currentScreen !== FLOW_SCREENS.SEARCH} 
Â  Â  Â  Â  Â  Â  onBack={handleBack} 
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {currentScreen === FLOW_SCREENS.SEARCH ? children : null}
Â  Â  Â  Â  </MobileHeader>
Â  Â  Â  Â  <div className="flex-1 overflow-y-auto">
Â  Â  Â  Â  Â  Â  {renderContent()}
Â  Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default BookingFlow;